on:
  schedule:
    # Run at 12:05 UTC every day
    - cron: "5 12 * * *"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  resync:
    name: Resync
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - remote: https://gitlab.freedesktop.org/fontconfig/fontconfig.git
            mirror: scufflecloud/fontconfig-mirror
            topics: [fontconfig]
          - remote: https://sourceforge.net/p/opencore-amr/fdk-aac/ci/master/tree
            mirror: scufflecloud/fdk-aac-mirror
            topics: [fdk-aac]
          - remote: https://code.videolan.org/videolan/x264
            mirror: scufflecloud/x264-mirror
            topics: [x264]
          - remote: https://bitbucket.org/multicoreware/x265_git
            mirror: scufflecloud/x265-mirror
            topics: [x265]
          - remote: https://aomedia.googlesource.com/aom
            mirror: scufflecloud/aom-mirror
            topics: [aom]
          - remote: https://gitlab.com/AOMediaCodec/SVT-AV1
            mirror: scufflecloud/SVT-AV1-mirror
            topics: [SVT-AV1]
    steps:
      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v2.1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          repositories: ${{ matrix.mirror }}

      - name: Configure Repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const ruleset = (target) => ({
              name: 'no-update-${target}',
              target,
              enforcement: 'active',
              bypass_actors: [
                {
                  actor_id: ${{ secrets.GH_APP_ID }},
                  actor_type: 'Integration',
                  bypass_mode: 'always'
                }
              ],
              conditions: {
                ref_name: {
                  include: [
                    '~ALL'
                  ],
                  exclude: []
                }
              },
              rules: [
                {
                  type: 'non_fast_forward',
                },
                {
                  type: 'creation',
                },
                {
                  type: 'update',
                },
                {
                  type: 'deletion',
                }
              ],
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });

            await github.request('POST /repos/${{ matrix.mirror }}/rulesets', ruleset('branch'));
            await github.request('POST /repos/${{ matrix.mirror }}/rulesets', ruleset('tag'));
            await github.request('PATCH /repos/${{ matrix.mirror }}', {
              description: 'Mirror of ${{ matrix.remote }}',
              homepage: '${{ matrix.remote }}',
              has_issues: false,
              has_projects: false,
              has_wiki: false,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            await github.request('PUT /repos/${{ matrix.mirror }}/topics', {
              names: ${{ toJSON(matrix.topics) }}.concat(['mirror']),
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });

      - name: Clone the remote repo as bare
        run: |
          git clone --bare "${{ matrix.remote }}" remote

      - name: Fetch all updates (including LFS if available)
        run: |
          cd remote
          git fetch --all

      - name: Push to the mirror repo
        run: |
          cd remote
          git push --mirror https://${{ steps.generate_token.outputs.token }}@github.com/${{ matrix.mirror }}
